import { useEffect, useRef, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import HeaderMobile from "../components/HeaderMobile";
import styles from "../styles/Home.module.css";
import illustrationWorking from "../resources/images/illustration-working.svg";
import CallToAction from "../components/CallToAction";
import ShortenALink from "../components/ShortenALink";
import AdvancedStatistics from "../components/AdvancedStatistics";
import Cards from "../components/Cards";
import LastCallToAction from "../components/LastCallToAction";
import Footer from "../components/Footer";
import HeaderDesktop from "../components/HeaderDesktop";
import ShortenLinks from "../components/ShortenLinks";
import axios from "axios";

export default function Home() {
  const [mobileNav, setMobileNav] = useState(false);
  const [isDesktop, setIsDesktop] = useState(false);
  const [query, setQuery] = useState("");
  const [links, setLinks] = useState([]);

  const inputRef = useRef();

  const getShortenedLink = async () => {
    inputRef.current.value = "";

    const headers = {
      Authorization: `Bearer ${process.env.NEXT_PUBLIC_BITLY_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    };

    const response = await axios.post(
      "https://api-ssl.bitly.com/v4/bitlinks",
      {
        long_url: query,
      },
      {
        headers: headers,
      }
    );

    setLinks((prev) => [...prev, response.data]);
  };

  useEffect(() => {
    setIsDesktop(window.matchMedia("(min-width: 1224px)").matches);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.pageContainer}>
        {isDesktop ? (
          <HeaderDesktop />
        ) : (
          <HeaderMobile
            switchNav={() => setMobileNav((prev) => !prev)}
            nav={mobileNav}
          />
        )}
        <div className={styles.workerImage}>
          <Image
            layout="fixed"
            width={540}
            height={380}
            src={illustrationWorking}
          />
        </div>
        <CallToAction />
        <section className={styles.shortenALinkSection}>
          <ShortenALink
            valueRef={inputRef}
            onChange={() => setQuery(inputRef.current.value)}
            onClick={getShortenedLink}
          />
        </section>
        <section className={styles.shortenALinkSection2}>
          {links.length > 0
            ? links.map((link) => (
                <ShortenLinks
                  original={link.long_url}
                  shortened={link.link}
                  key={link.id}
                />
              ))
            : null}
        </section>
        <AdvancedStatistics />
        <Cards />
        <LastCallToAction />
        <Footer />
      </main>
    </div>
  );
}
